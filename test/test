/* ParameterNode.asEnvKeyValues() {
  return children.map(c => c.asEnvKeyValues()) // recursively get child key=value pairs
               .flat()
               .map(kv => "${key}_${kv}"); // prefix key with parent key and _
}
StringParameter.asEnvKeyValues() {
  return [
    "${key}=${value}", // this node's env key=value pair
  ];
}
IntParameter.asEnvKeyValues() {
  return [
    "${key}=${value.toString()}", // this node's env key=value pair
  ];
}
BoolParameter.asEnvKeyValues() {
  return [
    "${key}=${value ? 'true' : 'false'}", // this node's env key=value pair
  ];
} */

////////////////////////////////////////////////////////////////////////////////////////////
/* conf = ParameterNode("ZFS Replication Config", "zfsRepConfig")
  .addChild(ZfsDatasetParameter("Source Dataset", "sourceDataset"))
  .addChild(ZfsDatasetParameter("Destination Dataset", "destDataset"))
  // etc ...
  .addChild(BoolParameter("Use Compression", "compression"));

// after configuring...

conf.asEnvKeyValuePairs() returns ->
[
  "zfsRepConfig_sourceDataset_pool=tank",
  "zfsRepConfig_sourceDataset_dataset=dataset1",
  "zfsRepConfig_destDataset_host=192.168.4.20",
  "zfsRepConfig_destDataset_pool=tank",
  "zfsRepConfig_destDataset_dataset=dataset1",
  ...
  "zfsRepConfig_useCompression=true",
] */

////////////////////////////////////////////////////////////////////////////////////////////
/* if [ -n "$zfsRepConfig_destDataset_host" ]; then
  SSH=ssh "$zfsRepConfig_destDataset_host" # etc for user, port
fi

# create snapshot
SNAPSHOT_NAME=snap_20240321_1315

zfs send "${zfsRepConfig_sourceDataset_pool}/${zfsRepConfig_sourceDataset_dataset}@${SNAPSHOT_NAME}" | \
  $SSH zfs recv "${zfsRepConfig_destDataset_pool}/${zfsRepConfig_destDataset_dataset}@${SNAPSHOT_NAME}" */